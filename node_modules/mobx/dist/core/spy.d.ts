import { IComputedDidChange } from "mobx/dist/core/computedvalue"
import { IMapDidChange, ISetDidChange, Lambda } from "mobx/dist/internal"
import { IArrayDidChange } from "mobx/dist/types/observablearray"
import { IObjectDidChange } from "mobx/dist/types/observableobject"
import { IBoxDidChange, IValueDidChange } from "mobx/dist/types/observablevalue"
export declare function isSpyEnabled(): boolean
export type PureSpyEvent = {
    type: "action"
    name: string
    object: unknown
    arguments: unknown[]
} | {
    type: "scheduled-reaction"
    name: string
} | {
    type: "reaction"
    name: string
} | {
    type: "error"
    name: string
    message: string
    error: string
} | IComputedDidChange<unknown> | IObjectDidChange<unknown> | IArrayDidChange<unknown> | IMapDidChange<unknown, unknown> | ISetDidChange<unknown> | IValueDidChange<unknown> | IBoxDidChange<unknown> | {
    type: "report-end"
    spyReportEnd: true
    time?: number
}
type SpyEvent = PureSpyEvent & {
    spyReportStart?: true
}
export declare function spyReport(event: SpyEvent): void
export declare function spyReportStart(event: PureSpyEvent): void
export declare function spyReportEnd(change?: {
    time?: number
}): void
export declare function spy(listener: (change: SpyEvent) => void): Lambda
export { };

